

arguments:
  imm8:
    type: literal
    format: 0%02xH
    range: [0, 255]
  # FIXME add support for discrete port/immediate choices.
  port:
    type: literal
    format: 0%02xH
    range: [0, 1]
  imm16:
    type: literal
    format: 0%04xH
    range: [0, 65535]
  reg:
    type: choice
    choices: [b, c, d, e, h, l, m, a]
  reg-nom:
    type: choice
    choices: [b, c, d, e, h, l, a]
  rp:
    type: choice
    choices: [b, d, h, sp]
  bp:
    type: choice
    choices: [b, d, h, psw]
  rpbd:
    type: choice
    choices: [b, d]
  arith8:
    type: choice
    choices: [add, sub, inr, dcr, cmp, ana, ora, xra]
  arith8imm:
    type: choice
    choices: [adi, sui, cpi, ani, ori, xri]

blocks:
  - mov $(reg), $(reg-nom)
  - mov $(reg-nom), $(reg)
  - mvi $(reg), $(imm8)
  - lxi $(rp), $(imm8) 
  - lda $(imm16)
  - sta $(imm16)
  - ldax $(rpbd)
  - stax $(rpbd)
  - lhld $(imm16)
  - shld $(imm16)
  - lxi $(rp), $(imm16)
  - push $(bp)
  - pop $(bp)
  - xthl
  - sphl
  - pchl
  - xchg
  # 8-Bit Arithmetic.
  - $(arith8) $(reg)
  - $(arith8imm) $(imm8)
  - daa 
  - adc $(reg)
  - aci $(imm8)
  - sbb $(reg)
  - sbi $(imm8)
  # 16-Bit Arithmetic.
  - dad $(rp)
  - inx $(rp)
  - dcx $(rp)
  # Jumps, Calls, and Returns
  #
  #JMP   Addr        Unconditional Jump to location Addr.
  #CALL  Addr        Unconditional Subroutine call to location Addr.
  #RET               Unconditional return from subroutine.
  #
  #       Conditional variations
  #
  #       Flag condition          Jump         Call         Return
  #       --------------          ------       ------       ------
  #        Nonzero                JNZ          CNZ          RNZ
  #        Zero                   JZ           CZ           RZ
  #        No Carry               JNC          CNC          RNC
  #        Carry                  JC           CC           RC
  #        Parity Odd             JPO          CPO          RPO
  #        Parity Even            JPE          CPE          RPE
  #        Plus                   JP           CP           RP
  #        Minus                  JM           CM           RM
  #
  # Rotations.
  - ral
  - rar
  - rlc
  - rrc
  # I/O instructions (assume some support form simulation platforms).
  - in $(port)
  - out $(port)
  # Other Instructions.
  - cmc
  - stc
  - cma
  - nop
  # Interrupt-related instructions.
  # - hlt     # Might be included if sim platforms agree on semantics.
  # - di
  # - ei
  # Trap calls.
  # - rst 0   # Excluded to avoid possible endless loop.
  - rst 1
  - rst 2
  - rst 3
  - rst 4
  - rst 5
  - rst 6
  - rst 7

wrapper: |
          ; Assembly wrapper for random autogenerated source.
                  cpu 8080
                  aseg

          reset:  org   0H
                  jmp start
                  org   8H
                  ret
                  org   10H
                  ret 
                  org   18H
                  ret
                  org   20H
                  ret 
                  org   28H
                  ret
                  org   30H
                  ret
                  org   38H
                  ret
          start:
          $(sequence)

                  end

